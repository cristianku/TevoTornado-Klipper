# Tevo Tornado (with BLTouch, 3 TMC2208 in UART mode on XYZ and 1 LV8729 on E) configuration file
# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though other AVR chips are also possible).

# See the example.cfg file for a description of available parameters.

[servo bltouch]
pin: ar11
maximum_servo_angle: 180
minimum_pulse_width: 0.0006
maximum_pulse_width: 0.0024

[probe]
pin: ar18
z_offset: 0.80
activate_gcode:
    SET_SERVO SERVO=bltouch ANGLE=10
    SET_SERVO SERVO=bltouch ANGLE=60
    G4 P200
deactivate_gcode:
    SET_SERVO SERVO=bltouch ANGLE=90
    G4 P100

[homing_override]
set_position_z: 15
axes: z
gcode:
    G90
    G1 Z30 F480
    G28 X0 Y0
    G1 X194 Y162 F3600
    G28 Z0
    G1 Z15 F480

[bed_mesh]
speed: 150
horizontal_move_z: 5
min_point: 50,30
max_point: 300,290
probe_count: 3,3
mesh_pps: 2,2

#######################
[stepper_x]
step_pin: ar54
dir_pin: !ar55
enable_pin: !ar38
# For TMC2208 at 1/16 microsteps with 80 steps/mm
# Don't use a calibrated value, use the theorical value only otherwise 
# the TMC2208 may stop working while printing
step_distance: .0125
#endstop_pin: ^!ar3
#endstop_pin: tmc2130_stepper_x:virtual_endstop
position_endstop: 0
position_max: 300
homing_speed: 50

[tmc2130 stepper_x]
cs_pin: PG0
microsteps: 16
run_current: .5
sense_resistor: 0.220
diag1_pin: !PK2

##############################
[tmc2130 stepper_x]
cs_pin: P1.17
spi_software_sclk_pin: P0.4
spi_software_mosi_pin: P4.28
spi_software_miso_pin: P0.5
diag1_pin: P1.29
microsteps: 16
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 250


# Configure a TMC2130 stepper motor driver via SPI bus. To use this
# feature, define a config section with a "tmc2130" prefix followed by
# the name of the corresponding stepper config section (for example,
# "[tmc2130 stepper_x]"). This also creates a
# "tmc2130_stepper_x:virtual_enable" virtual pin which may be used as
# the stepper's enable_pin (for enabling the driver via an SPI
# message).
#[tmc2130 stepper_x]
#cs_pin:
#   The pin corresponding to the TMC2130 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
#spi_bus:
#spi_speed:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   These optional parameters allow one to customize the SPI settings
#   used to communicate with the chip.
#microsteps:
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
#interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
#run_current:
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 0
#driver_TBL: 1
#driver_TOFF: 4
#driver_HEND: 7
#driver_HSTRT: 0
#driver_PWM_AUTOSCALE: True
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 4
#driver_PWM_AMPL: 128
#driver_SGT: 0
#   Set the given register during the configuration of the TMC2130
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag1_pin:
#   The micro-controller pin attached to the DIAG1 line of the TMC2130
#   chip. Setting this creates a "tmc2130_stepper_x:virtual_endstop"
#   virtual pin which may be used as the stepper's endstop_pin. Doing
#   this enables "sensorless homing". (Be sure to also set driver_SGT
#   to an appropriate sensitivity value.) The default is to not enable
#   sensorless homing. See docs/Sensorless_Homing.md for details on how
#   to configure this.


###############################

[stepper_y]
step_pin: ar60
dir_pin: !ar61
enable_pin: !ar56
# For TMC2208 at 1/16 microsteps with 80 steps/mm
# Don't use a calibrated value, use the theorical value only otherwise 
# the TMC2208 may stop working while printing
step_distance: .0125
#endstop_pin: ^!ar14
#endstop_pin: tmc2130_stepper_y:virtual_endstop
position_endstop: 0
position_max: 300
homing_speed: 50


[tmc2130 stepper_y]
cs_pin: PG2
microsteps: 16
run_current: .5
sense_resistor: 0.220
diag1_pin: !PK7


###############################

[stepper_z]
step_pin: ar46
dir_pin: ar48
enable_pin: !ar62
# For TMC2208 at 1/16 microsteps with 400 steps/mm
# Don't use a calibrated value, use the theorical value only otherwise 
# the TMC2208 may stop working while printing
step_distance: .0025
#endstop_pin: probe:z_virtual_endstop
#endstop_pin: tmc2130_stepper_z:virtual_endstop
position_max: 390


[tmc2130 stepper_z]
cs_pin: PK5
microsteps: 16
run_current: .5
sense_resistor: 0.220
diag1_pin: !PK6


################################

[tmc2130 stepper_y]
cs_pin: P1.15
spi_software_sclk_pin: P0.4
spi_software_mosi_pin: P4.28
spi_software_miso_pin: P0.5
diag1_pin: P1.27
microsteps: 16
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 250

[tmc2130 stepper_z]
cs_pin: P1.10
spi_software_sclk_pin: P0.4
spi_software_mosi_pin: P4.28
spi_software_miso_pin: P0.5
#diag1_pin: P1.25
microsteps: 16
run_current: 0.650
hold_current: 0.450
stealthchop_threshold: 30

###########################
##########################
## TMC2208 UART configuration
#[tmc2208 stepper_x]
#uart_pin: ar63
#tx_pin: ar40
#microsteps: 16
#run_current: 0.600
#stealthchop_threshold: 250

#[tmc2208 stepper_y]
#uart_pin: ar64
#tx_pin: ar59
#microsteps: 16
#run_current: 0.600
#stealthchop_threshold: 250

#[tmc2208 stepper_z]
#uart_pin: ar65
#tx_pin: ar42
#microsteps: 16
#run_current: 0.600
#stealthchop_threshold: 30

[extruder]
step_pin: ar26
# For LV8729 dir_pin is reversed
dir_pin: ar28
enable_pin: !ar24
# For LV8729 at 1/32 with 800 steps/mm
step_distance: .00125
nozzle_diameter: 0.400
filament_diameter: 1.750
# Simplify3D needs a high cross section for rafts
max_extrude_cross_section: 2
heater_pin: ar10
sensor_type: PT100 INA826
sensor_pin: analog13
control: pid
pid_Kp: 21.169
pid_Ki: 1.111
pid_Kd: 100.817
min_temp: 0
max_temp: 250

# Temperature sensors. One can define any number of temperature
# sensors. Their values are reported via the M105 command.
#[temperature_sensor my_sensor]
#sensor_type:
#sensor_pin:
#min_temp:
#max_temp:
#   See the heater section in example.cfg for the definition of the
#   above parameters.
#gcode_id:
#   See the heater_generic section above for the definition of this
#   parameter.


[heater_fan extruder_fan]
pin: ar7
heater: extruder
heater_temp: 50.0

[heater_bed]
heater_pin: ar8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog14
control: pid
pid_Kp: 56.401
pid_Ki: 1.649
pid_Kd: 482.228
min_temp: 0
max_temp: 130

[fan]
pin: ar9

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0
pin_map: arduino

[printer]
# Need to increase this buffer because at the end of the Benchy boat test,
# the toolhead pause 1 second when printing circles, causing big clogs on the print. 15 is not enough so we use 30
buffer_time_high: 30
kinematics: cartesian
max_velocity: 250
max_z_velocity: 30
max_accel: 2000
max_z_accel: 120

[virtual_sdcard]
path: ~/.octoprint/uploads/

# "RepRapDiscount 128x64 Full Graphic Smart Controller" type displays
[display]
lcd_type: st7920
cs_pin: ar16
sclk_pin: ar23
sid_pin: ar17

[gcode_macro G80]
gcode:
 BED_MESH_CALIBRATE
 G1 X194 Y162 F3600
 
[gcode_macro G81]
gcode:
 BED_MESH_OUTPUT
